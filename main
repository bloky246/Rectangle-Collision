#define OLC_PGE_APPLICATION
#include "olcPixelGameEngine.h"
#include <iostream>
#include <algorithm>
#undef min
#undef max



// Override base class with your custom functionality
class Example : public olc::PixelGameEngine
{
public:
	Example()
	{
		// Name you application
		sAppName = "Collision";
	}

	struct rect
	{
		olc::vf2d pos;
		olc::vf2d size;
	};

	bool PointVsRect(const olc::vf2d& p, const rect& r)
	{
		return (p.x >= r.pos.x && p.y >= r.pos.y && p.x < r.pos.x + r.size.x && p.y < r.pos.y + r.size.y);
	}

	bool RectVsRect(const rect& r1, const rect& r2)
	{
		return(r1.pos.x < r2.pos.x + r2.size.x && r1.pos.x + r1.size.x > r2.pos.x &&
					r1.pos.y < r2.pos.y + r2.size.y && r1.pos.y + r1.size.y > r2.pos.y);
	}

	bool RayVsRect(const olc::vf2d& ray_origin, const olc::vf2d& ray_dir, const rect& target, 
		olc::vf2d& contact_point, olc::vf2d& contact_normal, float& t_hit_near)
	{
		olc::vf2d t_near = (target.pos - ray_origin) / ray_dir;
		olc::vf2d t_far = (target.pos + target.size - ray_origin) / ray_dir;
	
		if (t_near.x > t_far.x) std::swap(t_near.x, t_far.x);
		if (t_near.y > t_far.y) std::swap(t_near.y, t_far.y);

		if (t_near.x > t_far.y || t_near.y > t_far.x) return false;

		t_hit_near = std::max(t_near.x, t_near.y);
		float t_hit_far = std::max(t_far.x, t_far.y);

		if (t_hit_far < 0) return false;

		contact_point = ray_origin + t_hit_near * ray_dir;

		if (t_near.x > t_near.y)
			if (ray_dir.x < 0)
				contact_normal = { 1,0 };
			else
				contact_normal = { -1,0 };
		else if (t_near.x < t_near.y)
			if (ray_dir.y < 0)
				contact_normal = { 0,1 };
			else
				contact_normal = { 0,-1 };
		return true;
	}


public:
	bool OnUserCreate() override
	{
		// Called once at the start, so create things here
		return true;
	}

	bool OnUserUpdate(float fElapsedTime) override
	{
		olc::vf2d vMouse = { float(GetMouseX()), float(GetMouseY()) };

		rect r{ {100.0f, 100.0f},{50.0f, 30.0f} };

		olc::vf2d ray_point = { 20.0f,20.0f };
		olc::vf2d ray_direction = vMouse - ray_point;

		Clear(olc::DARK_BLUE);

		DrawLine(ray_point, vMouse, olc::GREEN);

		olc::vf2d cp, cn;
		float t;

		if (RayVsRect(ray_point, ray_direction, r, cp, cn, t) && t <= 1.0f)
		{
			DrawRect(r.pos, r.size, olc::YELLOW);
			FillCircle(cp, 3, olc::RED);
			DrawLine(cp, cp + cn * 10, olc::YELLOW);
		}
		else
			DrawRect(r.pos, r.size, olc::WHITE);

		return true;
	}
};

int main()
{
	Example demo;
	if (demo.Construct(256, 240, 4, 4))
		demo.Start();
	return 0;
}
